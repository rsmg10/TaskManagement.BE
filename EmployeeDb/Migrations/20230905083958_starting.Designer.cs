// <auto-generated />
using System;
using MITT.EmployeeDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microsoft.SqlServer.Types;

#nullable disable

namespace MITT.EmployeeDb.Migrations
{
    [DbContext(typeof(ManagementDb))]
    [Migration("20230905083958_starting")]
    partial class starting
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.7.23375.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("Sequence-Generator", "SequenceGenerator");

            modelBuilder.Entity("MITT.EmployeeDb.Models.AssignedBeTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BeReviews")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DevTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeveloperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TaskState")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DevTaskId" }, "IX_AssignedBETasks_DevTaskId");

                    b.HasIndex(new[] { "DeveloperId" }, "IX_AssignedBETasks_DeveloperId");

                    b.ToTable("AssignedBETasks", (string)null);
                });

            modelBuilder.Entity("MITT.EmployeeDb.Models.AssignedManager", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProjectId" }, "IX_AssignedManagers_ProjectId");

                    b.HasIndex(new[] { "ProjectManagerId" }, "IX_AssignedManagers_ProjectManagerId");

                    b.ToTable("AssignedManagers");
                });

            modelBuilder.Entity("MITT.EmployeeDb.Models.AssignedQaTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DevTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeveloperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QaReviews")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskState")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QaId");

                    b.HasIndex(new[] { "DevTaskId" }, "IX_AssignedQATasks_DevTaskId");

                    b.HasIndex(new[] { "DeveloperId" }, "IX_AssignedQATasks_DeveloperId");

                    b.ToTable("AssignedQATasks", (string)null);
                });

            modelBuilder.Entity("MITT.EmployeeDb.Models.DevTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignedManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommitTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompletionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ImplementationType")
                        .HasColumnType("int");

                    b.Property<string>("MainBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MergeBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeqNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskState")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AssignedManagerId" }, "IX_Tasks_AssignedManagerId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("MITT.EmployeeDb.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActiveState")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeType")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<SqlHierarchyId?>("HierarchyId")
                        .HasColumnType("hierarchyid");

                    b.Property<bool>("IsReviewer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSigned")
                        .HasColumnType("bit");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Employees", (string)null);

                    b.HasDiscriminator<int>("EmployeeType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MITT.EmployeeDb.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Bank")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Bank", "ProjectType")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("MITT.EmployeeDb.Models.Developer", b =>
                {
                    b.HasBaseType("MITT.EmployeeDb.Models.Employee");

                    b.Property<int>("DevType")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Employees", (string)null);

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("MITT.EmployeeDb.Models.Manager", b =>
                {
                    b.HasBaseType("MITT.EmployeeDb.Models.Employee");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Employees", null, t =>
                        {
                            t.Property("Image")
                                .HasColumnName("Manager_Image");
                        });

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("MITT.EmployeeDb.Models.QA", b =>
                {
                    b.HasBaseType("MITT.EmployeeDb.Models.Employee");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("Employees", (string)null);

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("MITT.EmployeeDb.Models.AssignedBeTask", b =>
                {
                    b.HasOne("MITT.EmployeeDb.Models.DevTask", "DevTask")
                        .WithMany("AssignedBetasks")
                        .HasForeignKey("DevTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MITT.EmployeeDb.Models.Developer", "Developer")
                        .WithMany("AssignedBetasks")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DevTask");

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("MITT.EmployeeDb.Models.AssignedManager", b =>
                {
                    b.HasOne("MITT.EmployeeDb.Models.Project", "Project")
                        .WithMany("AssignedManagers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MITT.EmployeeDb.Models.Manager", "ProjectManager")
                        .WithMany("AssignedManagers")
                        .HasForeignKey("ProjectManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("ProjectManager");
                });

            modelBuilder.Entity("MITT.EmployeeDb.Models.AssignedQaTask", b =>
                {
                    b.HasOne("MITT.EmployeeDb.Models.DevTask", "DevTask")
                        .WithMany("AssignedQatasks")
                        .HasForeignKey("DevTaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MITT.EmployeeDb.Models.Developer", "Developer")
                        .WithMany()
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MITT.EmployeeDb.Models.QA", "Qa")
                        .WithMany("AssignedQaTasks")
                        .HasForeignKey("QaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DevTask");

                    b.Navigation("Developer");

                    b.Navigation("Qa");
                });

            modelBuilder.Entity("MITT.EmployeeDb.Models.DevTask", b =>
                {
                    b.HasOne("MITT.EmployeeDb.Models.AssignedManager", "AssignedManager")
                        .WithMany("Tasks")
                        .HasForeignKey("AssignedManagerId");

                    b.Navigation("AssignedManager");
                });

            modelBuilder.Entity("MITT.EmployeeDb.Models.AssignedManager", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("MITT.EmployeeDb.Models.DevTask", b =>
                {
                    b.Navigation("AssignedBetasks");

                    b.Navigation("AssignedQatasks");
                });

            modelBuilder.Entity("MITT.EmployeeDb.Models.Project", b =>
                {
                    b.Navigation("AssignedManagers");
                });

            modelBuilder.Entity("MITT.EmployeeDb.Models.Developer", b =>
                {
                    b.Navigation("AssignedBetasks");
                });

            modelBuilder.Entity("MITT.EmployeeDb.Models.Manager", b =>
                {
                    b.Navigation("AssignedManagers");
                });

            modelBuilder.Entity("MITT.EmployeeDb.Models.QA", b =>
                {
                    b.Navigation("AssignedQaTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
